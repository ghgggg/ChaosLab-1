
#version 450

#if CHAOS_FP16_STORAGE
#extension GL_EXT_shader_16bit_storage: require
#endif
#if CHAOS_FP16_ARITHMETIC
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int use_bias = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param0 = 0;
layout (constant_id = 3) const float activation_param1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int in_dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int in_w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int in_h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int in_c = 0; 

layout (constant_id = shape_constant_id_offset + 4) const int out_dims = 0;
layout (constant_id = shape_constant_id_offset + 5) const int out_w = 0;
layout (constant_id = shape_constant_id_offset + 6) const int out_h = 0;
layout (constant_id = shape_constant_id_offset + 7) const int out_c = 0;



layout (binding = 0) readonly buffer bottom { sfp bottom_data[]; };
layout (binding = 1) writeonly buffer top { sfp top_data[]; }; 
layout (binding = 2) readonly buffer weight { sfp weight_data[]; };
layout (binding = 3) readonly buffer bias { sfp bias_data[]; };
//layout (binding = 4) readonly buffer bottom_shape { int bottom_shape_data[]; };
//layout (binding = 5) readonly buffer bottom_steps { int bottom_steps_data[]; };
//layout (binding = 6) readonly buffer top_shape { int top_shape_data[]; };
//layout (binding = 7) readonly buffer top_steps { int top_steps_data[]; };

layout (push_constant) uniform parameter
{
    int in_dims;
    int in_w;
    int in_h;
    int in_c;

    int out_dims;
    int out_w;
    int out_h;
    int out_c;
} p;

void main()
{
	int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= psc(out_w) || gy >= psc(out_h) || gz >= 1)
        return;


    afp sum = afp(0.f);

    //int in_idx = gy * psc(in_w) + gz * psc(in_w) * psc(in_h);
    //int in_offset = 0;
    //for (int j = psc(in_dims) - 1; j >= 0; j--)
    //{
    //    in_offset += in_idx % bottom_shape_data[j] * bottom_steps_data[j];
    //    in_idx /= bottom_shape_data[j];
    //}

    int in_offset = gy * psc(in_w);
    int w_offset = gx * psc(in_w);
    for (int i = 0; i < psc(out_w); i++)
    {
        sum += buffer_ld1(weight_data, w_offset + i) * buffer_ld1(bottom_data, in_offset + i);
    }


    //int out_idx = gx + gy * psc(out_w) + gz * psc(out_w) * psc(out_h);
    //int out_offset = 0;
    //for (int j = psc(out_dims) - 1; j>=0; j--)
    //{
    //    out_offset += out_idx % top_shape_data[j] * top_steps_data[j];
    //    out_idx /= top_shape_data[j];
    //}
    const int out_offset = gx + gy * psc(out_w);
    buffer_st1(top_data, out_offset, sum);
}